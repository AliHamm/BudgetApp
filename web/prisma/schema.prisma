// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// Transaction type indicates whether a transaction is income, expense, or transfer
enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

/// Budget period indicates the budgeting timeframe
enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String     @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?

  accounts       Account[]
  sessions       Session[]

  // App relations
  transactions   Transaction[]
  budgets        Budget[]
  goals          Goal[]
  categories     Category[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

// NextAuth.js tables (Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String           @id @default(cuid())
  name        String
  type        TransactionType
  userId      String?
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  allocations  BudgetAllocation[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([userId, name, type])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  amountCents Int
  type        TransactionType
  categoryId  String?
  category    Category?       @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  description String?
  date        DateTime        @default(now())

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId, date])
}

model Budget {
  id          String             @id @default(cuid())
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime
  allocations BudgetAllocation[]

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([userId, startDate, endDate])
}

model BudgetAllocation {
  id         String    @id @default(cuid())
  budgetId   String
  budget     Budget    @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  amountCents Int
}

model Goal {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  targetAmountCents  Int
  currentAmountCents Int    @default(0)
  deadline      DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
}
